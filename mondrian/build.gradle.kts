//import org.javacc.plugin.gradle.javacc.CompileJavaccTask

/*
* This file was generated by the Gradle 'init' task.
*/

plugins {
    id("java")
    id("java-library")
    id("com.github.johnrengelman.shadow") version "8.1.1"
}

tasks.register("prepareKotlinBuildScriptModel") {}
java.sourceCompatibility = JavaVersion.VERSION_17
java.targetCompatibility = JavaVersion.VERSION_17

sourceSets {
    create("propertyUtil") {
        java {
            srcDir("$projectDir/src/main/java/mondrian/util")
            include("PropertyUtil.java")
            compileClasspath += sourceSets["main"].compileClasspath
            destinationDirectory.set(layout.buildDirectory.dir("classes/java/propertyUtil"))
        }
    }

    create("exceptionTypes") {
        java {
            srcDir("$projectDir/src/main/java/mondrian/olap")
            include("MondrianException.java", "ResultLimitExceededException.java", "InvalidHierarchyException.java", "ResourceLimitExceededException.java", "NativeEvaluationUnsupportedException.java", "QueryCanceledException.java", "QueryTimeoutException.java")
            compileClasspath += sourceSets["main"].compileClasspath
            destinationDirectory.set(layout.buildDirectory.dir("classes/java/exceptionTypes"))
        }
    }

    create("generatedResource") {
        java {
            srcDir("$projectDir/src/generated/java/mondrian/resource")
            compileClasspath += sourceSets["main"].compileClasspath
            destinationDirectory.set(layout.buildDirectory.dir("classes/java/generatedResource"))
        }
    }

    main {
        java {
            srcDirs("$projectDir/src/generated/java", "$projectDir/src/main/java")
            compileClasspath += getByName("propertyUtil").output
            compileClasspath += getByName("exceptionTypes").output
        }

        resources {
            srcDir("$projectDir/src/generated/resources")
            srcDir(layout.buildDirectory.dir("resources/it"))
        }
    }

    create("it") {
        java {
            srcDir("$projectDir/src/it/java")
            compileClasspath += sourceSets["main"].output
            compileClasspath += sourceSets["generatedResource"].output
            compileClasspath += sourceSets.test.get().compileClasspath
            destinationDirectory.set(layout.buildDirectory.dir("classes/java/it"))
        }
    }

}

tasks {
    register("ccParser", JavaExec::class) {
        group = "build"
        description = "Javacc compilation of Mondrian MDX grammar"
        mainClass.set("javacc")
        doFirst {
            val javaCCJar = javaccparsergen.resolvedConfiguration.resolvedArtifacts.single { it.extension == "jar" }.file.absolutePath
            classpath = fileTree(javaCCJar)
            args = listOf("-OUTPUT_DIRECTORY=${projectDir}/src/generated/java/mondrian/parser", "${projectDir}/src/main/java/mondrian/parser/MdxParser.jj")
        }
        dependsOn(javaccparsergen)
    }

    register("generateMondrianProperties", JavaExec::class) {
        group = "build"
        description = "Mondrian properties class"
        mainClass.set("mondrian.util.PropertyUtil")
        classpath = sourceSets["propertyUtil"].runtimeClasspath
        args = listOf("src/main/java/mondrian/olap", "src/generated/java/mondrian/olap")
        dependsOn(getByName("compileExceptionTypesJava"))

    }

    register("generateMondrianResources") {
        group = "build"
        dependsOn(resgen, getByName("exceptionTypesClasses"), getByName("compilePropertyUtilJava"), getByName("generatedResourceClasses"))
        doLast {
            var resGenClassPath = project(":eigenbase-resgen").sourceSets.getByName("main").output.classesDirs.asPath
            resGenClassPath += ";" + configurations.getByName("compileClasspath").asPath
            resGenClassPath += ";" + sourceSets.getByName("exceptionTypes").output.classesDirs.asPath
            ant.withGroovyBuilder {
                "taskdef"("name" to "resgen", "classname" to "org.eigenbase.resgen.ResourceGenTask", "classpath" to resGenClassPath)
                "resgen"("srcdir" to "src/main/java", "destdir" to "src/generated/java", "resdir" to "src/generated/resources", "style" to "functor", "locales" to "en_US,en_GB") {
                    "include"("name" to "mondrian/resource/MondrianResource.xml")
                }
            }
        }
    }

    register("XOMGen") {
        group = "build"
        dependsOn(xomgen)
        doLast {
            val xomGenClassPath = project(":eigenbase-xom").sourceSets.getByName("main").output.classesDirs.asPath
            project.file("src/generated/java").mkdirs()
            ant.withGroovyBuilder {
                "taskdef"("name" to "xomgen",
                        "classname" to "org.eigenbase.xom.XOMGenTask",
                        "classpath" to xomGenClassPath)
                "xomgen"("model" to "src/main/java/mondrian/olap/Mondrian.xml",
                        "destdir" to "src/generated/java",
                        "classname" to "mondrian.olap.MondrianDef",
                        "dtdname" to "mondrian.dtd")
                "xomgen"("model" to "src/main/resources/DefaultRulesSchema.xml",
                        "destdir" to "src/generated/java",
                        "classname" to "mondrian.rolap.aggmatcher.DefaultDef",
                        "dtdname" to "aggregates.dtd")
                "xomgen"("model" to "src/main/java/mondrian/xmla/DataSourcesConfig.xml",
                        "destdir" to "src/generated/java",
                        "classname" to "mondrian.xmla.DataSourcesConfig",
                        "dtdname" to "datasourcesconfig.dtd")
            }
        }
    }

    register("parserCUP") {
        group = "build"
        dependsOn(parsergen)
        doLast {
            ant.withGroovyBuilder {
                val javaCUPJar = parsergen.resolvedConfiguration.resolvedArtifacts.single { it.extension == "jar" }.file.absolutePath
                "taskdef"("name" to "javacup",
                        "classname" to "com.github.jhoenicke.javacup.anttask.CUPTask",
                        "classpath" to javaCUPJar
                )
                "javacup"("srcfile" to "$projectDir/src/main/java/mondrian/olap/Parser.cup",
                        "destdir" to "$projectDir/src/main/java/mondrian/olap/",
                        "package" to "mondrian.olap",
                        "parser" to "Parser",
                        "symbols" to "ParserSym",
                        "expect" to "63",
                        "interface" to "true")

            }
        }
    }
}

val resgen = configurations.create("resgen")
val xomgen = configurations.create("xomgen")
val parsergen = configurations.create("parsergen")
val javaccparsergen = configurations.create("javaccparsergen")
val iTest by configurations.creating {
    extendsFrom(configurations.testImplementation.get())
}

dependencies {
    api(libs.xml.apis.xml.apis)
    api(libs.commons.collections.commons.collections)
    api(libs.commons.dbcp.commons.dbcp)
    api(libs.commons.lang.commons.lang)
    api(libs.commons.io.commons.io)
    api(libs.commons.logging.commons.logging)
    api(libs.com.google.guava.guava)
    api(libs.org.apache.logging.log4j.log4j.core)
    api(libs.commons.math.commons.math)
    api(libs.commons.pool.commons.pool)
    api(libs.org.apache.commons.commons.vfs2)
    api(libs.org.dom4j.dom4j)
    api(libs.javax.validation.validation.api)
	api(libs.javax.activation.activation)
    api("com.sun.activation:all:2.0.1")
    api("avalon-framework:avalon-framework:4.1.3")
    api("org.apache.xmlgraphics:batik-all:1.13")
    api("commons-beanutils:commons-beanutils:1.6")
    api("commons-digester:commons-digester:1.6")
    api("commons-fileupload:commons-fileupload:1.2.1")
    api("org.apache.xmlgraphics:fop:2.1")
    api("org.codehaus.groovy:groovy-all:1.6.0")
    //api("com.sun.media:jai-codec:1.1.3")
    api("org.apache.jakarta:jakarta-regexp:1.2")
    api("jaxen:jaxen:full")
    api("jcommon:jcommon:1.0.5")
    api("jfree:jfreechart:1.0.9")
    api("com.sun.faces:jsf-api:2.2.12")
    api("javax.servlet:jstl:1.2")
    api("javax.xml.soap:saaj-api:1.3.4")
    api("saxpath:saxpath:1.0-FCS")
    api(project(":eigenbase-xom"))
    api(project(":eigenbase-properties"))
    compileOnly(project(":eigenbase-resgen"))
    resgen(project(":eigenbase-resgen"))
    xomgen(project(":eigenbase-xom"))
    api(libs.org.olap4j.olap4j)
    //api(libs.org.olap4j.olap4j.xmla)
    api(libs.xerces.xercesimpl)
    api(libs.javax.servlet.servlet.api)
    api(libs.javax.servlet.jsp.api)
    api(project(":javacup"))
    parsergen(project(":javacup"))
    api(libs.net.java.dev.javacc.javacc)
    javaccparsergen(libs.net.java.dev.javacc.javacc)
    //testImplementation(libs.org.olap4j.olap4j.tck)
    testImplementation(libs.xmlunit.xmlunit)
    testImplementation(libs.org.mockito.mockito.all)
    api(libs.mysql.mysql.connector.java)
    api("com.google.protobuf:protobuf-java") {
        version {
            strictly("3.11.0")
        }
    }
    testImplementation("com.google.protobuf:protobuf-java") {
        version {
            strictly("3.11.0")
        }
    }
    testImplementation(project(":eigenbase-properties"))
    testImplementation(project(":eigenbase-resgen"))

}

tasks.getByName("compilePropertyUtilJava") {
    dependsOn(project(":javacup").getTasksByName("jar", false))
}

tasks.getByName("compileExceptionTypesJava") {
    dependsOn(project(":javacup").getTasksByName("jar", false))
}


tasks.getByName("ccParser") {
    dependsOn(tasks.getByName("generateMondrianProperties"), tasks.getByName("generateMondrianResources"), tasks.getByName("parserCUP"), tasks.getByName("XOMGen"))
}


tasks.getByName("compileJava") {
    dependsOn(project(":javacup").getTasksByName("copyAntBuildOutput", false), tasks.getByName("ccParser"))
}

tasks.getByName("processResources") {
    dependsOn(tasks.getByName("processItResources"))
}

tasks.getByName("clean") {
    delete("$projectDir/src/generated", "$projectDir/src/main/java/mondrian/olap/Parser.java", "$projectDir/src/main/java/mondrian/olap/ParserSym.java")
}
