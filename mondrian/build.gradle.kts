/*
* This file was generated by the Gradle 'init' task.
*/

plugins {
    id("java")
    id("java-library")
}

tasks.register<Wrapper>("wrapper") {
    gradleVersion = "7.2"
}
tasks.register("prepareKotlinBuildScriptModel") {}

sourceSets {
    create("generateProperties") {
        java {
            srcDir("$projectDir/src/main/java/mondrian/util")
            include("PropertyUtil.java")
            compileClasspath += sourceSets["main"].compileClasspath
        }
    }

    create("generateResources") {
        java {
            srcDir("$projectDir/src/main/java/mondrian/olap")
            include("MondrianException.java", "ResultLimitExceededException.java", "InvalidHierarchyException.java", "ResourceLimitExceededException.java", "NativeEvaluationUnsupportedException.java", "QueryCanceledException.java", "QueryTimeoutException.java")
            compileClasspath += sourceSets["main"].compileClasspath
        }
    }
    main {
        java {
            compileClasspath += sourceSets["generateProperties"].output
            compileClasspath += sourceSets["generateResources"].output
        }
    }
}
tasks {
    register("generateMondrianProperties", JavaExec::class) {
        group = "build"
        description = "Mondrian properties class"
        mainClass.set("mondrian.util.PropertyUtil")
        classpath = sourceSets["generateProperties"].runtimeClasspath
        args = listOf("src/main/java/mondrian/olap", "src/generated/java/mondrian/olap")
        dependsOn("generatePropertiesClasses")
    }

    register("generateMondrianResources") {
        group = "build"
        dependsOn(resgen)
        doLast {
            var resGenClassPath = project(":eigenbase-resgen").sourceSets.getByName("main").output.classesDirs.asPath
            resGenClassPath += ";" + configurations.getByName("compileClasspath").asPath
            ant.withGroovyBuilder {
                "taskdef"("name" to "resgen", "classname" to "org.eigenbase.resgen.ResourceGenTask", "classpath" to resGenClassPath)
                "resgen"("srcdir" to "src/main/java", "destdir" to "src/generated/java", "resdir" to "src/generated/resources", "style" to "functor", "locales" to "en_US") {
                    "include"("name" to "mondrian/resource/MondrianResource.xml")
                }
            }
        }
    }
}

val resgen = configurations.create("resgen")

dependencies {
    api(libs.xml.apis.xml.apis)
    api(libs.commons.collections.commons.collections)
    api(libs.commons.dbcp.commons.dbcp)
    api(libs.commons.lang.commons.lang)
    api(libs.commons.io.commons.io)
    api(libs.commons.logging.commons.logging)
    api(libs.com.google.guava.guava)
    api(libs.org.apache.logging.log4j.log4j.core)
    api(libs.commons.math.commons.math)
    api(libs.commons.pool.commons.pool)
    api(libs.org.apache.commons.commons.vfs2)
    api(libs.org.dom4j.dom4j)
    api(libs.javax.validation.validation.api)
    api(project(":eigenbase-xom"))
    api(project(":eigenbase-properties"))
    compileOnly(project(":eigenbase-resgen"))
    resgen(project(":eigenbase-resgen"))
    api(libs.org.olap4j.olap4j)
    //api(libs.org.olap4j.olap4j.xmla)
    api(libs.xerces.xercesimpl)
    api(libs.javax.servlet.servlet.api)
    api(libs.javax.servlet.jsp.api)
    //api(libs.javacup.javacup)
    api(libs.net.java.dev.javacc.javacc)
    testImplementation(libs.org.olap4j.olap4j.tck)
    testImplementation(libs.xmlunit.xmlunit)
    testImplementation(libs.org.mockito.mockito.all)
    testImplementation(libs.mysql.mysql.connector.java)
}

tasks.withType<JavaCompile>() {
    dependsOn(tasks.getByName("generateMondrianResources"))
}